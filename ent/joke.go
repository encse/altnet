// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/encse/altnet/ent/joke"
)

// Joke is the model entity for the Joke schema.
type Joke struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Category holds the value of the "category" field.
	Category string `json:"category,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Joke) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case joke.FieldID:
			values[i] = new(sql.NullInt64)
		case joke.FieldBody, joke.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Joke", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Joke fields.
func (j *Joke) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case joke.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case joke.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				j.Body = value.String
			}
		case joke.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				j.Category = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Joke.
// Note that you need to call Joke.Unwrap() before calling this method if this Joke
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Joke) Update() *JokeUpdateOne {
	return NewJokeClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Joke entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Joke) Unwrap() *Joke {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Joke is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Joke) String() string {
	var builder strings.Builder
	builder.WriteString("Joke(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("body=")
	builder.WriteString(j.Body)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(j.Category)
	builder.WriteByte(')')
	return builder.String()
}

// Jokes is a parsable slice of Joke.
type Jokes []*Joke
