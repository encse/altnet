// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encse/altnet/ent/predicate"
	"github.com/encse/altnet/ent/virtualuser"
)

// VirtualUserDelete is the builder for deleting a VirtualUser entity.
type VirtualUserDelete struct {
	config
	hooks    []Hook
	mutation *VirtualUserMutation
}

// Where appends a list predicates to the VirtualUserDelete builder.
func (vud *VirtualUserDelete) Where(ps ...predicate.VirtualUser) *VirtualUserDelete {
	vud.mutation.Where(ps...)
	return vud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vud *VirtualUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, VirtualUserMutation](ctx, vud.sqlExec, vud.mutation, vud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vud *VirtualUserDelete) ExecX(ctx context.Context) int {
	n, err := vud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vud *VirtualUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(virtualuser.Table, sqlgraph.NewFieldSpec(virtualuser.FieldID, field.TypeInt))
	if ps := vud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vud.mutation.done = true
	return affected, err
}

// VirtualUserDeleteOne is the builder for deleting a single VirtualUser entity.
type VirtualUserDeleteOne struct {
	vud *VirtualUserDelete
}

// Where appends a list predicates to the VirtualUserDelete builder.
func (vudo *VirtualUserDeleteOne) Where(ps ...predicate.VirtualUser) *VirtualUserDeleteOne {
	vudo.vud.mutation.Where(ps...)
	return vudo
}

// Exec executes the deletion query.
func (vudo *VirtualUserDeleteOne) Exec(ctx context.Context) error {
	n, err := vudo.vud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{virtualuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vudo *VirtualUserDeleteOne) ExecX(ctx context.Context) {
	if err := vudo.Exec(ctx); err != nil {
		panic(err)
	}
}
