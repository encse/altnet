// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLastLogin holds the string denoting the last_login field in the database.
	FieldLastLogin = "last_login"
	// FieldLastLoginAttempt holds the string denoting the last_login_attempt field in the database.
	FieldLastLoginAttempt = "last_login_attempt"
	// EdgeHosts holds the string denoting the hosts edge name in mutations.
	EdgeHosts = "hosts"
	// Table holds the table name of the user in the database.
	Table = "users"
	// HostsTable is the table that holds the hosts relation/edge. The primary key declared below.
	HostsTable = "host_hackers"
	// HostsInverseTable is the table name for the Host entity.
	// It exists in this package in order to avoid circular dependency with the "host" package.
	HostsInverseTable = "hosts"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUser,
	FieldPassword,
	FieldStatus,
	FieldLastLogin,
	FieldLastLoginAttempt,
}

var (
	// HostsPrimaryKey and HostsColumn2 are the table columns denoting the
	// primary key for the hosts relation (M2M).
	HostsPrimaryKey = []string{"host_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
