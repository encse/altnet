// Code generated by ent, DO NOT EDIT.

package host

import (
	"entgo.io/ent/dialect/sql"
	"github.com/encse/altnet/ent/predicate"
	"github.com/encse/altnet/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldEQ(FieldName, vc))
}

// Entry applies equality check predicate on the "entry" field. It's identical to EntryEQ.
func Entry(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEntry, v))
}

// MachineType applies equality check predicate on the "machine_type" field. It's identical to MachineTypeEQ.
func MachineType(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldMachineType, v))
}

// Organization applies equality check predicate on the "organization" field. It's identical to OrganizationEQ.
func Organization(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldOrganization, v))
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldContact, v))
}

// ContactAddress applies equality check predicate on the "contact_address" field. It's identical to ContactAddressEQ.
func ContactAddress(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldContactAddress, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCountry, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldLocation, v))
}

// GeoLocation applies equality check predicate on the "geo_location" field. It's identical to GeoLocationEQ.
func GeoLocation(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldGeoLocation, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldEQ(FieldName, vc))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldNEQ(FieldName, vc))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...schema.HostName) predicate.Host {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Host(sql.FieldIn(FieldName, v...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...schema.HostName) predicate.Host {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Host(sql.FieldNotIn(FieldName, v...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldGT(FieldName, vc))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldGTE(FieldName, vc))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldLT(FieldName, vc))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldLTE(FieldName, vc))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldContains(FieldName, vc))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldHasPrefix(FieldName, vc))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldHasSuffix(FieldName, vc))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldEqualFold(FieldName, vc))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v schema.HostName) predicate.Host {
	vc := string(v)
	return predicate.Host(sql.FieldContainsFold(FieldName, vc))
}

// EntryEQ applies the EQ predicate on the "entry" field.
func EntryEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldEntry, v))
}

// EntryNEQ applies the NEQ predicate on the "entry" field.
func EntryNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldEntry, v))
}

// EntryIn applies the In predicate on the "entry" field.
func EntryIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldEntry, vs...))
}

// EntryNotIn applies the NotIn predicate on the "entry" field.
func EntryNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldEntry, vs...))
}

// EntryGT applies the GT predicate on the "entry" field.
func EntryGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldEntry, v))
}

// EntryGTE applies the GTE predicate on the "entry" field.
func EntryGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldEntry, v))
}

// EntryLT applies the LT predicate on the "entry" field.
func EntryLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldEntry, v))
}

// EntryLTE applies the LTE predicate on the "entry" field.
func EntryLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldEntry, v))
}

// EntryContains applies the Contains predicate on the "entry" field.
func EntryContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldEntry, v))
}

// EntryHasPrefix applies the HasPrefix predicate on the "entry" field.
func EntryHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldEntry, v))
}

// EntryHasSuffix applies the HasSuffix predicate on the "entry" field.
func EntryHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldEntry, v))
}

// EntryEqualFold applies the EqualFold predicate on the "entry" field.
func EntryEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldEntry, v))
}

// EntryContainsFold applies the ContainsFold predicate on the "entry" field.
func EntryContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldEntry, v))
}

// MachineTypeEQ applies the EQ predicate on the "machine_type" field.
func MachineTypeEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldMachineType, v))
}

// MachineTypeNEQ applies the NEQ predicate on the "machine_type" field.
func MachineTypeNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldMachineType, v))
}

// MachineTypeIn applies the In predicate on the "machine_type" field.
func MachineTypeIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldMachineType, vs...))
}

// MachineTypeNotIn applies the NotIn predicate on the "machine_type" field.
func MachineTypeNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldMachineType, vs...))
}

// MachineTypeGT applies the GT predicate on the "machine_type" field.
func MachineTypeGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldMachineType, v))
}

// MachineTypeGTE applies the GTE predicate on the "machine_type" field.
func MachineTypeGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldMachineType, v))
}

// MachineTypeLT applies the LT predicate on the "machine_type" field.
func MachineTypeLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldMachineType, v))
}

// MachineTypeLTE applies the LTE predicate on the "machine_type" field.
func MachineTypeLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldMachineType, v))
}

// MachineTypeContains applies the Contains predicate on the "machine_type" field.
func MachineTypeContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldMachineType, v))
}

// MachineTypeHasPrefix applies the HasPrefix predicate on the "machine_type" field.
func MachineTypeHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldMachineType, v))
}

// MachineTypeHasSuffix applies the HasSuffix predicate on the "machine_type" field.
func MachineTypeHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldMachineType, v))
}

// MachineTypeEqualFold applies the EqualFold predicate on the "machine_type" field.
func MachineTypeEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldMachineType, v))
}

// MachineTypeContainsFold applies the ContainsFold predicate on the "machine_type" field.
func MachineTypeContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldMachineType, v))
}

// OrganizationEQ applies the EQ predicate on the "organization" field.
func OrganizationEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldOrganization, v))
}

// OrganizationNEQ applies the NEQ predicate on the "organization" field.
func OrganizationNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldOrganization, v))
}

// OrganizationIn applies the In predicate on the "organization" field.
func OrganizationIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldOrganization, vs...))
}

// OrganizationNotIn applies the NotIn predicate on the "organization" field.
func OrganizationNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldOrganization, vs...))
}

// OrganizationGT applies the GT predicate on the "organization" field.
func OrganizationGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldOrganization, v))
}

// OrganizationGTE applies the GTE predicate on the "organization" field.
func OrganizationGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldOrganization, v))
}

// OrganizationLT applies the LT predicate on the "organization" field.
func OrganizationLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldOrganization, v))
}

// OrganizationLTE applies the LTE predicate on the "organization" field.
func OrganizationLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldOrganization, v))
}

// OrganizationContains applies the Contains predicate on the "organization" field.
func OrganizationContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldOrganization, v))
}

// OrganizationHasPrefix applies the HasPrefix predicate on the "organization" field.
func OrganizationHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldOrganization, v))
}

// OrganizationHasSuffix applies the HasSuffix predicate on the "organization" field.
func OrganizationHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldOrganization, v))
}

// OrganizationEqualFold applies the EqualFold predicate on the "organization" field.
func OrganizationEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldOrganization, v))
}

// OrganizationContainsFold applies the ContainsFold predicate on the "organization" field.
func OrganizationContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldOrganization, v))
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldContact, v))
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldContact, v))
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldContact, vs...))
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldContact, vs...))
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldContact, v))
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldContact, v))
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldContact, v))
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldContact, v))
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldContact, v))
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldContact, v))
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldContact, v))
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldContact, v))
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldContact, v))
}

// ContactAddressEQ applies the EQ predicate on the "contact_address" field.
func ContactAddressEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldContactAddress, v))
}

// ContactAddressNEQ applies the NEQ predicate on the "contact_address" field.
func ContactAddressNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldContactAddress, v))
}

// ContactAddressIn applies the In predicate on the "contact_address" field.
func ContactAddressIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldContactAddress, vs...))
}

// ContactAddressNotIn applies the NotIn predicate on the "contact_address" field.
func ContactAddressNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldContactAddress, vs...))
}

// ContactAddressGT applies the GT predicate on the "contact_address" field.
func ContactAddressGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldContactAddress, v))
}

// ContactAddressGTE applies the GTE predicate on the "contact_address" field.
func ContactAddressGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldContactAddress, v))
}

// ContactAddressLT applies the LT predicate on the "contact_address" field.
func ContactAddressLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldContactAddress, v))
}

// ContactAddressLTE applies the LTE predicate on the "contact_address" field.
func ContactAddressLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldContactAddress, v))
}

// ContactAddressContains applies the Contains predicate on the "contact_address" field.
func ContactAddressContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldContactAddress, v))
}

// ContactAddressHasPrefix applies the HasPrefix predicate on the "contact_address" field.
func ContactAddressHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldContactAddress, v))
}

// ContactAddressHasSuffix applies the HasSuffix predicate on the "contact_address" field.
func ContactAddressHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldContactAddress, v))
}

// ContactAddressEqualFold applies the EqualFold predicate on the "contact_address" field.
func ContactAddressEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldContactAddress, v))
}

// ContactAddressContainsFold applies the ContainsFold predicate on the "contact_address" field.
func ContactAddressContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldContactAddress, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldCountry, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldLocation, v))
}

// GeoLocationEQ applies the EQ predicate on the "geo_location" field.
func GeoLocationEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldEQ(FieldGeoLocation, v))
}

// GeoLocationNEQ applies the NEQ predicate on the "geo_location" field.
func GeoLocationNEQ(v string) predicate.Host {
	return predicate.Host(sql.FieldNEQ(FieldGeoLocation, v))
}

// GeoLocationIn applies the In predicate on the "geo_location" field.
func GeoLocationIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldIn(FieldGeoLocation, vs...))
}

// GeoLocationNotIn applies the NotIn predicate on the "geo_location" field.
func GeoLocationNotIn(vs ...string) predicate.Host {
	return predicate.Host(sql.FieldNotIn(FieldGeoLocation, vs...))
}

// GeoLocationGT applies the GT predicate on the "geo_location" field.
func GeoLocationGT(v string) predicate.Host {
	return predicate.Host(sql.FieldGT(FieldGeoLocation, v))
}

// GeoLocationGTE applies the GTE predicate on the "geo_location" field.
func GeoLocationGTE(v string) predicate.Host {
	return predicate.Host(sql.FieldGTE(FieldGeoLocation, v))
}

// GeoLocationLT applies the LT predicate on the "geo_location" field.
func GeoLocationLT(v string) predicate.Host {
	return predicate.Host(sql.FieldLT(FieldGeoLocation, v))
}

// GeoLocationLTE applies the LTE predicate on the "geo_location" field.
func GeoLocationLTE(v string) predicate.Host {
	return predicate.Host(sql.FieldLTE(FieldGeoLocation, v))
}

// GeoLocationContains applies the Contains predicate on the "geo_location" field.
func GeoLocationContains(v string) predicate.Host {
	return predicate.Host(sql.FieldContains(FieldGeoLocation, v))
}

// GeoLocationHasPrefix applies the HasPrefix predicate on the "geo_location" field.
func GeoLocationHasPrefix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasPrefix(FieldGeoLocation, v))
}

// GeoLocationHasSuffix applies the HasSuffix predicate on the "geo_location" field.
func GeoLocationHasSuffix(v string) predicate.Host {
	return predicate.Host(sql.FieldHasSuffix(FieldGeoLocation, v))
}

// GeoLocationEqualFold applies the EqualFold predicate on the "geo_location" field.
func GeoLocationEqualFold(v string) predicate.Host {
	return predicate.Host(sql.FieldEqualFold(FieldGeoLocation, v))
}

// GeoLocationContainsFold applies the ContainsFold predicate on the "geo_location" field.
func GeoLocationContainsFold(v string) predicate.Host {
	return predicate.Host(sql.FieldContainsFold(FieldGeoLocation, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldPhone))
}

// NeighboursIsNil applies the IsNil predicate on the "neighbours" field.
func NeighboursIsNil() predicate.Host {
	return predicate.Host(sql.FieldIsNull(FieldNeighbours))
}

// NeighboursNotNil applies the NotNil predicate on the "neighbours" field.
func NeighboursNotNil() predicate.Host {
	return predicate.Host(sql.FieldNotNull(FieldNeighbours))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Host) predicate.Host {
	return predicate.Host(func(s *sql.Selector) {
		p(s.Not())
	})
}
