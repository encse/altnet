// Code generated by ent, DO NOT EDIT.

package host

import (
	"fmt"
)

const (
	// Label holds the string label denoting the host type in the database.
	Label = "host"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldEntry holds the string denoting the entry field in the database.
	FieldEntry = "entry"
	// FieldMachineType holds the string denoting the machine_type field in the database.
	FieldMachineType = "machine_type"
	// FieldOrganization holds the string denoting the organization field in the database.
	FieldOrganization = "organization"
	// FieldContact holds the string denoting the contact field in the database.
	FieldContact = "contact"
	// FieldContactAddress holds the string denoting the contact_address field in the database.
	FieldContactAddress = "contact_address"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldGeoLocation holds the string denoting the geo_location field in the database.
	FieldGeoLocation = "geo_location"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldNeighbours holds the string denoting the neighbours field in the database.
	FieldNeighbours = "neighbours"
	// Table holds the table name of the host in the database.
	Table = "hosts"
)

// Columns holds all SQL columns for host fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldEntry,
	FieldMachineType,
	FieldOrganization,
	FieldContact,
	FieldContactAddress,
	FieldCountry,
	FieldLocation,
	FieldGeoLocation,
	FieldPhone,
	FieldNeighbours,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEntry holds the default value on creation for the "entry" field.
	DefaultEntry string
	// DefaultMachineType holds the default value on creation for the "machine_type" field.
	DefaultMachineType string
	// DefaultOrganization holds the default value on creation for the "organization" field.
	DefaultOrganization string
	// DefaultContact holds the default value on creation for the "contact" field.
	DefaultContact string
	// DefaultContactAddress holds the default value on creation for the "contact_address" field.
	DefaultContactAddress string
	// DefaultCountry holds the default value on creation for the "country" field.
	DefaultCountry string
	// DefaultLocation holds the default value on creation for the "location" field.
	DefaultLocation string
	// DefaultGeoLocation holds the default value on creation for the "geo_location" field.
	DefaultGeoLocation string
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeBbs  Type = "bbs"
	TypeUucp Type = "uucp"
	TypeMil  Type = "mil"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeBbs, TypeUucp, TypeMil:
		return nil
	default:
		return fmt.Errorf("host: invalid enum value for type field: %q", _type)
	}
}
