// Code generated by ent, DO NOT EDIT.

package virtualuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/encse/altnet/ent/predicate"
	"github.com/encse/altnet/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VirtualUser {
	return predicate.VirtualUser(sql.FieldLTE(FieldID, id))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEQ(FieldUser, vc))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEQ(FieldPassword, vc))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEQ(FieldUser, vc))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldNEQ(FieldUser, vc))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...schema.Uname) predicate.VirtualUser {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.VirtualUser(sql.FieldIn(FieldUser, v...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...schema.Uname) predicate.VirtualUser {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.VirtualUser(sql.FieldNotIn(FieldUser, v...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldGT(FieldUser, vc))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldGTE(FieldUser, vc))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldLT(FieldUser, vc))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldLTE(FieldUser, vc))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldContains(FieldUser, vc))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldHasPrefix(FieldUser, vc))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldHasSuffix(FieldUser, vc))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEqualFold(FieldUser, vc))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v schema.Uname) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldContainsFold(FieldUser, vc))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEQ(FieldPassword, vc))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldNEQ(FieldPassword, vc))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...schema.Password) predicate.VirtualUser {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.VirtualUser(sql.FieldIn(FieldPassword, v...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...schema.Password) predicate.VirtualUser {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.VirtualUser(sql.FieldNotIn(FieldPassword, v...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldGT(FieldPassword, vc))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldGTE(FieldPassword, vc))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldLT(FieldPassword, vc))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldLTE(FieldPassword, vc))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldContains(FieldPassword, vc))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldHasPrefix(FieldPassword, vc))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldHasSuffix(FieldPassword, vc))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldEqualFold(FieldPassword, vc))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v schema.Password) predicate.VirtualUser {
	vc := string(v)
	return predicate.VirtualUser(sql.FieldContainsFold(FieldPassword, vc))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VirtualUser) predicate.VirtualUser {
	return predicate.VirtualUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VirtualUser) predicate.VirtualUser {
	return predicate.VirtualUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VirtualUser) predicate.VirtualUser {
	return predicate.VirtualUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
