// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/encse/altnet/ent/tcpservice"
)

// TcpService is the model entity for the TcpService schema.
type TcpService struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TcpServiceQuery when eager-loading is set.
	Edges TcpServiceEdges `json:"edges"`
}

// TcpServiceEdges holds the relations/edges for other nodes in the graph.
type TcpServiceEdges struct {
	// Hosts holds the value of the hosts edge.
	Hosts []*Host `json:"hosts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostsOrErr returns the Hosts value or an error if the edge
// was not loaded in eager-loading.
func (e TcpServiceEdges) HostsOrErr() ([]*Host, error) {
	if e.loadedTypes[0] {
		return e.Hosts, nil
	}
	return nil, &NotLoadedError{edge: "hosts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TcpService) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tcpservice.FieldID, tcpservice.FieldPort:
			values[i] = new(sql.NullInt64)
		case tcpservice.FieldName, tcpservice.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TcpService", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TcpService fields.
func (ts *TcpService) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tcpservice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ts.ID = int(value.Int64)
		case tcpservice.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ts.Name = value.String
			}
		case tcpservice.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				ts.Port = int(value.Int64)
			}
		case tcpservice.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ts.Description = value.String
			}
		}
	}
	return nil
}

// QueryHosts queries the "hosts" edge of the TcpService entity.
func (ts *TcpService) QueryHosts() *HostQuery {
	return NewTcpServiceClient(ts.config).QueryHosts(ts)
}

// Update returns a builder for updating this TcpService.
// Note that you need to call TcpService.Unwrap() before calling this method if this TcpService
// was returned from a transaction, and the transaction was committed or rolled back.
func (ts *TcpService) Update() *TcpServiceUpdateOne {
	return NewTcpServiceClient(ts.config).UpdateOne(ts)
}

// Unwrap unwraps the TcpService entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ts *TcpService) Unwrap() *TcpService {
	_tx, ok := ts.config.driver.(*txDriver)
	if !ok {
		panic("ent: TcpService is not a transactional entity")
	}
	ts.config.driver = _tx.drv
	return ts
}

// String implements the fmt.Stringer.
func (ts *TcpService) String() string {
	var builder strings.Builder
	builder.WriteString("TcpService(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ts.ID))
	builder.WriteString("name=")
	builder.WriteString(ts.Name)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(fmt.Sprintf("%v", ts.Port))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ts.Description)
	builder.WriteByte(')')
	return builder.String()
}

// TcpServices is a parsable slice of TcpService.
type TcpServices []*TcpService
