// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/encse/altnet/ent/migrate"

	"github.com/encse/altnet/ent/host"
	"github.com/encse/altnet/ent/joke"
	"github.com/encse/altnet/ent/tcpservice"
	"github.com/encse/altnet/ent/user"
	"github.com/encse/altnet/ent/virtualuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Host is the client for interacting with the Host builders.
	Host *HostClient
	// Joke is the client for interacting with the Joke builders.
	Joke *JokeClient
	// TcpService is the client for interacting with the TcpService builders.
	TcpService *TcpServiceClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VirtualUser is the client for interacting with the VirtualUser builders.
	VirtualUser *VirtualUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Host = NewHostClient(c.config)
	c.Joke = NewJokeClient(c.config)
	c.TcpService = NewTcpServiceClient(c.config)
	c.User = NewUserClient(c.config)
	c.VirtualUser = NewVirtualUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Host:        NewHostClient(cfg),
		Joke:        NewJokeClient(cfg),
		TcpService:  NewTcpServiceClient(cfg),
		User:        NewUserClient(cfg),
		VirtualUser: NewVirtualUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Host:        NewHostClient(cfg),
		Joke:        NewJokeClient(cfg),
		TcpService:  NewTcpServiceClient(cfg),
		User:        NewUserClient(cfg),
		VirtualUser: NewVirtualUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Host.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Host.Use(hooks...)
	c.Joke.Use(hooks...)
	c.TcpService.Use(hooks...)
	c.User.Use(hooks...)
	c.VirtualUser.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Host.Intercept(interceptors...)
	c.Joke.Intercept(interceptors...)
	c.TcpService.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.VirtualUser.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HostMutation:
		return c.Host.mutate(ctx, m)
	case *JokeMutation:
		return c.Joke.mutate(ctx, m)
	case *TcpServiceMutation:
		return c.TcpService.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VirtualUserMutation:
		return c.VirtualUser.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HostClient is a client for the Host schema.
type HostClient struct {
	config
}

// NewHostClient returns a client for the Host from the given config.
func NewHostClient(c config) *HostClient {
	return &HostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `host.Hooks(f(g(h())))`.
func (c *HostClient) Use(hooks ...Hook) {
	c.hooks.Host = append(c.hooks.Host, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `host.Intercept(f(g(h())))`.
func (c *HostClient) Intercept(interceptors ...Interceptor) {
	c.inters.Host = append(c.inters.Host, interceptors...)
}

// Create returns a builder for creating a Host entity.
func (c *HostClient) Create() *HostCreate {
	mutation := newHostMutation(c.config, OpCreate)
	return &HostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Host entities.
func (c *HostClient) CreateBulk(builders ...*HostCreate) *HostCreateBulk {
	return &HostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Host.
func (c *HostClient) Update() *HostUpdate {
	mutation := newHostMutation(c.config, OpUpdate)
	return &HostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostClient) UpdateOne(h *Host) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHost(h))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostClient) UpdateOneID(id int) *HostUpdateOne {
	mutation := newHostMutation(c.config, OpUpdateOne, withHostID(id))
	return &HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Host.
func (c *HostClient) Delete() *HostDelete {
	mutation := newHostMutation(c.config, OpDelete)
	return &HostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostClient) DeleteOne(h *Host) *HostDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostClient) DeleteOneID(id int) *HostDeleteOne {
	builder := c.Delete().Where(host.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostDeleteOne{builder}
}

// Query returns a query builder for Host.
func (c *HostClient) Query() *HostQuery {
	return &HostQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHost},
		inters: c.Interceptors(),
	}
}

// Get returns a Host entity by its id.
func (c *HostClient) Get(ctx context.Context, id int) (*Host, error) {
	return c.Query().Where(host.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostClient) GetX(ctx context.Context, id int) *Host {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryServices queries the services edge of a Host.
func (c *HostClient) QueryServices(h *Host) *TcpServiceQuery {
	query := (&TcpServiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(tcpservice.Table, tcpservice.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, host.ServicesTable, host.ServicesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVirtualusers queries the virtualusers edge of a Host.
func (c *HostClient) QueryVirtualusers(h *Host) *VirtualUserQuery {
	query := (&VirtualUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(virtualuser.Table, virtualuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, host.VirtualusersTable, host.VirtualusersColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHackers queries the hackers edge of a Host.
func (c *HostClient) QueryHackers(h *Host) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(host.Table, host.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, host.HackersTable, host.HackersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostClient) Hooks() []Hook {
	return c.hooks.Host
}

// Interceptors returns the client interceptors.
func (c *HostClient) Interceptors() []Interceptor {
	return c.inters.Host
}

func (c *HostClient) mutate(ctx context.Context, m *HostMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Host mutation op: %q", m.Op())
	}
}

// JokeClient is a client for the Joke schema.
type JokeClient struct {
	config
}

// NewJokeClient returns a client for the Joke from the given config.
func NewJokeClient(c config) *JokeClient {
	return &JokeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `joke.Hooks(f(g(h())))`.
func (c *JokeClient) Use(hooks ...Hook) {
	c.hooks.Joke = append(c.hooks.Joke, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `joke.Intercept(f(g(h())))`.
func (c *JokeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Joke = append(c.inters.Joke, interceptors...)
}

// Create returns a builder for creating a Joke entity.
func (c *JokeClient) Create() *JokeCreate {
	mutation := newJokeMutation(c.config, OpCreate)
	return &JokeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Joke entities.
func (c *JokeClient) CreateBulk(builders ...*JokeCreate) *JokeCreateBulk {
	return &JokeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Joke.
func (c *JokeClient) Update() *JokeUpdate {
	mutation := newJokeMutation(c.config, OpUpdate)
	return &JokeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JokeClient) UpdateOne(j *Joke) *JokeUpdateOne {
	mutation := newJokeMutation(c.config, OpUpdateOne, withJoke(j))
	return &JokeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JokeClient) UpdateOneID(id int) *JokeUpdateOne {
	mutation := newJokeMutation(c.config, OpUpdateOne, withJokeID(id))
	return &JokeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Joke.
func (c *JokeClient) Delete() *JokeDelete {
	mutation := newJokeMutation(c.config, OpDelete)
	return &JokeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JokeClient) DeleteOne(j *Joke) *JokeDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JokeClient) DeleteOneID(id int) *JokeDeleteOne {
	builder := c.Delete().Where(joke.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JokeDeleteOne{builder}
}

// Query returns a query builder for Joke.
func (c *JokeClient) Query() *JokeQuery {
	return &JokeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJoke},
		inters: c.Interceptors(),
	}
}

// Get returns a Joke entity by its id.
func (c *JokeClient) Get(ctx context.Context, id int) (*Joke, error) {
	return c.Query().Where(joke.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JokeClient) GetX(ctx context.Context, id int) *Joke {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JokeClient) Hooks() []Hook {
	return c.hooks.Joke
}

// Interceptors returns the client interceptors.
func (c *JokeClient) Interceptors() []Interceptor {
	return c.inters.Joke
}

func (c *JokeClient) mutate(ctx context.Context, m *JokeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JokeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JokeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JokeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JokeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Joke mutation op: %q", m.Op())
	}
}

// TcpServiceClient is a client for the TcpService schema.
type TcpServiceClient struct {
	config
}

// NewTcpServiceClient returns a client for the TcpService from the given config.
func NewTcpServiceClient(c config) *TcpServiceClient {
	return &TcpServiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tcpservice.Hooks(f(g(h())))`.
func (c *TcpServiceClient) Use(hooks ...Hook) {
	c.hooks.TcpService = append(c.hooks.TcpService, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tcpservice.Intercept(f(g(h())))`.
func (c *TcpServiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.TcpService = append(c.inters.TcpService, interceptors...)
}

// Create returns a builder for creating a TcpService entity.
func (c *TcpServiceClient) Create() *TcpServiceCreate {
	mutation := newTcpServiceMutation(c.config, OpCreate)
	return &TcpServiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TcpService entities.
func (c *TcpServiceClient) CreateBulk(builders ...*TcpServiceCreate) *TcpServiceCreateBulk {
	return &TcpServiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TcpService.
func (c *TcpServiceClient) Update() *TcpServiceUpdate {
	mutation := newTcpServiceMutation(c.config, OpUpdate)
	return &TcpServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TcpServiceClient) UpdateOne(ts *TcpService) *TcpServiceUpdateOne {
	mutation := newTcpServiceMutation(c.config, OpUpdateOne, withTcpService(ts))
	return &TcpServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TcpServiceClient) UpdateOneID(id int) *TcpServiceUpdateOne {
	mutation := newTcpServiceMutation(c.config, OpUpdateOne, withTcpServiceID(id))
	return &TcpServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TcpService.
func (c *TcpServiceClient) Delete() *TcpServiceDelete {
	mutation := newTcpServiceMutation(c.config, OpDelete)
	return &TcpServiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TcpServiceClient) DeleteOne(ts *TcpService) *TcpServiceDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TcpServiceClient) DeleteOneID(id int) *TcpServiceDeleteOne {
	builder := c.Delete().Where(tcpservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TcpServiceDeleteOne{builder}
}

// Query returns a query builder for TcpService.
func (c *TcpServiceClient) Query() *TcpServiceQuery {
	return &TcpServiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTcpService},
		inters: c.Interceptors(),
	}
}

// Get returns a TcpService entity by its id.
func (c *TcpServiceClient) Get(ctx context.Context, id int) (*TcpService, error) {
	return c.Query().Where(tcpservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TcpServiceClient) GetX(ctx context.Context, id int) *TcpService {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHosts queries the hosts edge of a TcpService.
func (c *TcpServiceClient) QueryHosts(ts *TcpService) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tcpservice.Table, tcpservice.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tcpservice.HostsTable, tcpservice.HostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TcpServiceClient) Hooks() []Hook {
	return c.hooks.TcpService
}

// Interceptors returns the client interceptors.
func (c *TcpServiceClient) Interceptors() []Interceptor {
	return c.inters.TcpService
}

func (c *TcpServiceClient) mutate(ctx context.Context, m *TcpServiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TcpServiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TcpServiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TcpServiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TcpServiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TcpService mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHosts queries the hosts edge of a User.
func (c *UserClient) QueryHosts(u *User) *HostQuery {
	query := (&HostClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(host.Table, host.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.HostsTable, user.HostsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VirtualUserClient is a client for the VirtualUser schema.
type VirtualUserClient struct {
	config
}

// NewVirtualUserClient returns a client for the VirtualUser from the given config.
func NewVirtualUserClient(c config) *VirtualUserClient {
	return &VirtualUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `virtualuser.Hooks(f(g(h())))`.
func (c *VirtualUserClient) Use(hooks ...Hook) {
	c.hooks.VirtualUser = append(c.hooks.VirtualUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `virtualuser.Intercept(f(g(h())))`.
func (c *VirtualUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.VirtualUser = append(c.inters.VirtualUser, interceptors...)
}

// Create returns a builder for creating a VirtualUser entity.
func (c *VirtualUserClient) Create() *VirtualUserCreate {
	mutation := newVirtualUserMutation(c.config, OpCreate)
	return &VirtualUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VirtualUser entities.
func (c *VirtualUserClient) CreateBulk(builders ...*VirtualUserCreate) *VirtualUserCreateBulk {
	return &VirtualUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VirtualUser.
func (c *VirtualUserClient) Update() *VirtualUserUpdate {
	mutation := newVirtualUserMutation(c.config, OpUpdate)
	return &VirtualUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VirtualUserClient) UpdateOne(vu *VirtualUser) *VirtualUserUpdateOne {
	mutation := newVirtualUserMutation(c.config, OpUpdateOne, withVirtualUser(vu))
	return &VirtualUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VirtualUserClient) UpdateOneID(id int) *VirtualUserUpdateOne {
	mutation := newVirtualUserMutation(c.config, OpUpdateOne, withVirtualUserID(id))
	return &VirtualUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VirtualUser.
func (c *VirtualUserClient) Delete() *VirtualUserDelete {
	mutation := newVirtualUserMutation(c.config, OpDelete)
	return &VirtualUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VirtualUserClient) DeleteOne(vu *VirtualUser) *VirtualUserDeleteOne {
	return c.DeleteOneID(vu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VirtualUserClient) DeleteOneID(id int) *VirtualUserDeleteOne {
	builder := c.Delete().Where(virtualuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VirtualUserDeleteOne{builder}
}

// Query returns a query builder for VirtualUser.
func (c *VirtualUserClient) Query() *VirtualUserQuery {
	return &VirtualUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVirtualUser},
		inters: c.Interceptors(),
	}
}

// Get returns a VirtualUser entity by its id.
func (c *VirtualUserClient) Get(ctx context.Context, id int) (*VirtualUser, error) {
	return c.Query().Where(virtualuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VirtualUserClient) GetX(ctx context.Context, id int) *VirtualUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VirtualUserClient) Hooks() []Hook {
	return c.hooks.VirtualUser
}

// Interceptors returns the client interceptors.
func (c *VirtualUserClient) Interceptors() []Interceptor {
	return c.inters.VirtualUser
}

func (c *VirtualUserClient) mutate(ctx context.Context, m *VirtualUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VirtualUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VirtualUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VirtualUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VirtualUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VirtualUser mutation op: %q", m.Op())
	}
}
