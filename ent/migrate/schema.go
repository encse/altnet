// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// HostsColumns holds the columns for the "hosts" table.
	HostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"bbs", "uucp", "mil"}},
		{Name: "entry", Type: field.TypeString, Default: ""},
		{Name: "machine_type", Type: field.TypeString, Default: ""},
		{Name: "organization", Type: field.TypeString, Default: ""},
		{Name: "contact", Type: field.TypeString, Default: ""},
		{Name: "contact_address", Type: field.TypeString, Default: ""},
		{Name: "country", Type: field.TypeString, Default: ""},
		{Name: "location", Type: field.TypeString, Default: ""},
		{Name: "geo_location", Type: field.TypeString, Default: ""},
		{Name: "phone", Type: field.TypeJSON, Nullable: true},
		{Name: "neighbours", Type: field.TypeJSON, Nullable: true},
	}
	// HostsTable holds the schema information for the "hosts" table.
	HostsTable = &schema.Table{
		Name:       "hosts",
		Columns:    HostsColumns,
		PrimaryKey: []*schema.Column{HostsColumns[0]},
	}
	// JokesColumns holds the columns for the "jokes" table.
	JokesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "body", Type: field.TypeString},
		{Name: "category", Type: field.TypeString},
	}
	// JokesTable holds the schema information for the "jokes" table.
	JokesTable = &schema.Table{
		Name:       "jokes",
		Columns:    JokesColumns,
		PrimaryKey: []*schema.Column{JokesColumns[0]},
	}
	// TCPServicesColumns holds the columns for the "tcp_services" table.
	TCPServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "port", Type: field.TypeInt, Unique: true},
		{Name: "description", Type: field.TypeString},
	}
	// TCPServicesTable holds the schema information for the "tcp_services" table.
	TCPServicesTable = &schema.Table{
		Name:       "tcp_services",
		Columns:    TCPServicesColumns,
		PrimaryKey: []*schema.Column{TCPServicesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "last_login", Type: field.TypeTime, Nullable: true},
		{Name: "last_login_attempt", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// VirtualUsersColumns holds the columns for the "virtual_users" table.
	VirtualUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "host_virtualusers", Type: field.TypeInt, Nullable: true},
	}
	// VirtualUsersTable holds the schema information for the "virtual_users" table.
	VirtualUsersTable = &schema.Table{
		Name:       "virtual_users",
		Columns:    VirtualUsersColumns,
		PrimaryKey: []*schema.Column{VirtualUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "virtual_users_hosts_virtualusers",
				Columns:    []*schema.Column{VirtualUsersColumns[3]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// HostServicesColumns holds the columns for the "host_services" table.
	HostServicesColumns = []*schema.Column{
		{Name: "host_id", Type: field.TypeInt},
		{Name: "tcp_service_id", Type: field.TypeInt},
	}
	// HostServicesTable holds the schema information for the "host_services" table.
	HostServicesTable = &schema.Table{
		Name:       "host_services",
		Columns:    HostServicesColumns,
		PrimaryKey: []*schema.Column{HostServicesColumns[0], HostServicesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "host_services_host_id",
				Columns:    []*schema.Column{HostServicesColumns[0]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "host_services_tcp_service_id",
				Columns:    []*schema.Column{HostServicesColumns[1]},
				RefColumns: []*schema.Column{TCPServicesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// HostHackersColumns holds the columns for the "host_hackers" table.
	HostHackersColumns = []*schema.Column{
		{Name: "host_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// HostHackersTable holds the schema information for the "host_hackers" table.
	HostHackersTable = &schema.Table{
		Name:       "host_hackers",
		Columns:    HostHackersColumns,
		PrimaryKey: []*schema.Column{HostHackersColumns[0], HostHackersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "host_hackers_host_id",
				Columns:    []*schema.Column{HostHackersColumns[0]},
				RefColumns: []*schema.Column{HostsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "host_hackers_user_id",
				Columns:    []*schema.Column{HostHackersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		HostsTable,
		JokesTable,
		TCPServicesTable,
		UsersTable,
		VirtualUsersTable,
		HostServicesTable,
		HostHackersTable,
	}
)

func init() {
	VirtualUsersTable.ForeignKeys[0].RefTable = HostsTable
	HostServicesTable.ForeignKeys[0].RefTable = HostsTable
	HostServicesTable.ForeignKeys[1].RefTable = TCPServicesTable
	HostHackersTable.ForeignKeys[0].RefTable = HostsTable
	HostHackersTable.ForeignKeys[1].RefTable = UsersTable
}
