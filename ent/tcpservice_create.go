// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encse/altnet/ent/host"
	"github.com/encse/altnet/ent/tcpservice"
)

// TcpServiceCreate is the builder for creating a TcpService entity.
type TcpServiceCreate struct {
	config
	mutation *TcpServiceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tsc *TcpServiceCreate) SetName(s string) *TcpServiceCreate {
	tsc.mutation.SetName(s)
	return tsc
}

// SetPort sets the "port" field.
func (tsc *TcpServiceCreate) SetPort(i int) *TcpServiceCreate {
	tsc.mutation.SetPort(i)
	return tsc
}

// SetDescription sets the "description" field.
func (tsc *TcpServiceCreate) SetDescription(s string) *TcpServiceCreate {
	tsc.mutation.SetDescription(s)
	return tsc
}

// AddHostIDs adds the "hosts" edge to the Host entity by IDs.
func (tsc *TcpServiceCreate) AddHostIDs(ids ...int) *TcpServiceCreate {
	tsc.mutation.AddHostIDs(ids...)
	return tsc
}

// AddHosts adds the "hosts" edges to the Host entity.
func (tsc *TcpServiceCreate) AddHosts(h ...*Host) *TcpServiceCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tsc.AddHostIDs(ids...)
}

// Mutation returns the TcpServiceMutation object of the builder.
func (tsc *TcpServiceCreate) Mutation() *TcpServiceMutation {
	return tsc.mutation
}

// Save creates the TcpService in the database.
func (tsc *TcpServiceCreate) Save(ctx context.Context) (*TcpService, error) {
	return withHooks[*TcpService, TcpServiceMutation](ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TcpServiceCreate) SaveX(ctx context.Context) *TcpService {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TcpServiceCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TcpServiceCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TcpServiceCreate) check() error {
	if _, ok := tsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TcpService.name"`)}
	}
	if _, ok := tsc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New(`ent: missing required field "TcpService.port"`)}
	}
	if _, ok := tsc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "TcpService.description"`)}
	}
	return nil
}

func (tsc *TcpServiceCreate) sqlSave(ctx context.Context) (*TcpService, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TcpServiceCreate) createSpec() (*TcpService, *sqlgraph.CreateSpec) {
	var (
		_node = &TcpService{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(tcpservice.Table, sqlgraph.NewFieldSpec(tcpservice.FieldID, field.TypeInt))
	)
	if value, ok := tsc.mutation.Name(); ok {
		_spec.SetField(tcpservice.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tsc.mutation.Port(); ok {
		_spec.SetField(tcpservice.FieldPort, field.TypeInt, value)
		_node.Port = value
	}
	if value, ok := tsc.mutation.Description(); ok {
		_spec.SetField(tcpservice.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := tsc.mutation.HostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tcpservice.HostsTable,
			Columns: tcpservice.HostsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: host.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TcpServiceCreateBulk is the builder for creating many TcpService entities in bulk.
type TcpServiceCreateBulk struct {
	config
	builders []*TcpServiceCreate
}

// Save creates the TcpService entities in the database.
func (tscb *TcpServiceCreateBulk) Save(ctx context.Context) ([]*TcpService, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TcpService, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TcpServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TcpServiceCreateBulk) SaveX(ctx context.Context) []*TcpService {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TcpServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TcpServiceCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
