// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/encse/altnet/ent/predicate"
	"github.com/encse/altnet/ent/virtualuser"
	"github.com/encse/altnet/schema"
)

// VirtualUserUpdate is the builder for updating VirtualUser entities.
type VirtualUserUpdate struct {
	config
	hooks    []Hook
	mutation *VirtualUserMutation
}

// Where appends a list predicates to the VirtualUserUpdate builder.
func (vuu *VirtualUserUpdate) Where(ps ...predicate.VirtualUser) *VirtualUserUpdate {
	vuu.mutation.Where(ps...)
	return vuu
}

// SetUser sets the "user" field.
func (vuu *VirtualUserUpdate) SetUser(s schema.Uname) *VirtualUserUpdate {
	vuu.mutation.SetUser(s)
	return vuu
}

// SetPassword sets the "password" field.
func (vuu *VirtualUserUpdate) SetPassword(s schema.Password) *VirtualUserUpdate {
	vuu.mutation.SetPassword(s)
	return vuu
}

// Mutation returns the VirtualUserMutation object of the builder.
func (vuu *VirtualUserUpdate) Mutation() *VirtualUserMutation {
	return vuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vuu *VirtualUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, VirtualUserMutation](ctx, vuu.sqlSave, vuu.mutation, vuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuu *VirtualUserUpdate) SaveX(ctx context.Context) int {
	affected, err := vuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vuu *VirtualUserUpdate) Exec(ctx context.Context) error {
	_, err := vuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuu *VirtualUserUpdate) ExecX(ctx context.Context) {
	if err := vuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuu *VirtualUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualuser.Table, virtualuser.Columns, sqlgraph.NewFieldSpec(virtualuser.FieldID, field.TypeInt))
	if ps := vuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuu.mutation.User(); ok {
		_spec.SetField(virtualuser.FieldUser, field.TypeString, value)
	}
	if value, ok := vuu.mutation.Password(); ok {
		_spec.SetField(virtualuser.FieldPassword, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vuu.mutation.done = true
	return n, nil
}

// VirtualUserUpdateOne is the builder for updating a single VirtualUser entity.
type VirtualUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VirtualUserMutation
}

// SetUser sets the "user" field.
func (vuuo *VirtualUserUpdateOne) SetUser(s schema.Uname) *VirtualUserUpdateOne {
	vuuo.mutation.SetUser(s)
	return vuuo
}

// SetPassword sets the "password" field.
func (vuuo *VirtualUserUpdateOne) SetPassword(s schema.Password) *VirtualUserUpdateOne {
	vuuo.mutation.SetPassword(s)
	return vuuo
}

// Mutation returns the VirtualUserMutation object of the builder.
func (vuuo *VirtualUserUpdateOne) Mutation() *VirtualUserMutation {
	return vuuo.mutation
}

// Where appends a list predicates to the VirtualUserUpdate builder.
func (vuuo *VirtualUserUpdateOne) Where(ps ...predicate.VirtualUser) *VirtualUserUpdateOne {
	vuuo.mutation.Where(ps...)
	return vuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuuo *VirtualUserUpdateOne) Select(field string, fields ...string) *VirtualUserUpdateOne {
	vuuo.fields = append([]string{field}, fields...)
	return vuuo
}

// Save executes the query and returns the updated VirtualUser entity.
func (vuuo *VirtualUserUpdateOne) Save(ctx context.Context) (*VirtualUser, error) {
	return withHooks[*VirtualUser, VirtualUserMutation](ctx, vuuo.sqlSave, vuuo.mutation, vuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuuo *VirtualUserUpdateOne) SaveX(ctx context.Context) *VirtualUser {
	node, err := vuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuuo *VirtualUserUpdateOne) Exec(ctx context.Context) error {
	_, err := vuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuuo *VirtualUserUpdateOne) ExecX(ctx context.Context) {
	if err := vuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuuo *VirtualUserUpdateOne) sqlSave(ctx context.Context) (_node *VirtualUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(virtualuser.Table, virtualuser.Columns, sqlgraph.NewFieldSpec(virtualuser.FieldID, field.TypeInt))
	id, ok := vuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VirtualUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, virtualuser.FieldID)
		for _, f := range fields {
			if !virtualuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != virtualuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuuo.mutation.User(); ok {
		_spec.SetField(virtualuser.FieldUser, field.TypeString, value)
	}
	if value, ok := vuuo.mutation.Password(); ok {
		_spec.SetField(virtualuser.FieldPassword, field.TypeString, value)
	}
	_node = &VirtualUser{config: vuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{virtualuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuuo.mutation.done = true
	return _node, nil
}
