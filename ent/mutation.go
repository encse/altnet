// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/encse/altnet/ent/host"
	"github.com/encse/altnet/ent/joke"
	"github.com/encse/altnet/ent/predicate"
	"github.com/encse/altnet/ent/schema"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHost = "Host"
	TypeJoke = "Joke"
)

// HostMutation represents an operation that mutates the Host nodes in the graph.
type HostMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *schema.HostName
	_type            *host.Type
	entry            *string
	machine_type     *string
	organization     *string
	contact          *string
	contact_address  *string
	country          *string
	location         *string
	geo_location     *string
	phone            *[]schema.PhoneNumber
	appendphone      []schema.PhoneNumber
	neighbours       *[]schema.HostName
	appendneighbours []schema.HostName
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Host, error)
	predicates       []predicate.Host
}

var _ ent.Mutation = (*HostMutation)(nil)

// hostOption allows management of the mutation configuration using functional options.
type hostOption func(*HostMutation)

// newHostMutation creates new mutation for the Host entity.
func newHostMutation(c config, op Op, opts ...hostOption) *HostMutation {
	m := &HostMutation{
		config:        c,
		op:            op,
		typ:           TypeHost,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHostID sets the ID field of the mutation.
func withHostID(id int) hostOption {
	return func(m *HostMutation) {
		var (
			err   error
			once  sync.Once
			value *Host
		)
		m.oldValue = func(ctx context.Context) (*Host, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Host.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHost sets the old Host of the mutation.
func withHost(node *Host) hostOption {
	return func(m *HostMutation) {
		m.oldValue = func(context.Context) (*Host, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HostMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HostMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HostMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HostMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Host.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *HostMutation) SetName(sn schema.HostName) {
	m.name = &sn
}

// Name returns the value of the "name" field in the mutation.
func (m *HostMutation) Name() (r schema.HostName, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldName(ctx context.Context) (v schema.HostName, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HostMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *HostMutation) SetType(h host.Type) {
	m._type = &h
}

// GetType returns the value of the "type" field in the mutation.
func (m *HostMutation) GetType() (r host.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldType(ctx context.Context) (v host.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *HostMutation) ResetType() {
	m._type = nil
}

// SetEntry sets the "entry" field.
func (m *HostMutation) SetEntry(s string) {
	m.entry = &s
}

// Entry returns the value of the "entry" field in the mutation.
func (m *HostMutation) Entry() (r string, exists bool) {
	v := m.entry
	if v == nil {
		return
	}
	return *v, true
}

// OldEntry returns the old "entry" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldEntry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntry: %w", err)
	}
	return oldValue.Entry, nil
}

// ResetEntry resets all changes to the "entry" field.
func (m *HostMutation) ResetEntry() {
	m.entry = nil
}

// SetMachineType sets the "machine_type" field.
func (m *HostMutation) SetMachineType(s string) {
	m.machine_type = &s
}

// MachineType returns the value of the "machine_type" field in the mutation.
func (m *HostMutation) MachineType() (r string, exists bool) {
	v := m.machine_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMachineType returns the old "machine_type" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldMachineType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMachineType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMachineType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMachineType: %w", err)
	}
	return oldValue.MachineType, nil
}

// ResetMachineType resets all changes to the "machine_type" field.
func (m *HostMutation) ResetMachineType() {
	m.machine_type = nil
}

// SetOrganization sets the "organization" field.
func (m *HostMutation) SetOrganization(s string) {
	m.organization = &s
}

// Organization returns the value of the "organization" field in the mutation.
func (m *HostMutation) Organization() (r string, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganization returns the old "organization" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldOrganization(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganization is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganization requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganization: %w", err)
	}
	return oldValue.Organization, nil
}

// ResetOrganization resets all changes to the "organization" field.
func (m *HostMutation) ResetOrganization() {
	m.organization = nil
}

// SetContact sets the "contact" field.
func (m *HostMutation) SetContact(s string) {
	m.contact = &s
}

// Contact returns the value of the "contact" field in the mutation.
func (m *HostMutation) Contact() (r string, exists bool) {
	v := m.contact
	if v == nil {
		return
	}
	return *v, true
}

// OldContact returns the old "contact" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldContact(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContact: %w", err)
	}
	return oldValue.Contact, nil
}

// ResetContact resets all changes to the "contact" field.
func (m *HostMutation) ResetContact() {
	m.contact = nil
}

// SetContactAddress sets the "contact_address" field.
func (m *HostMutation) SetContactAddress(s string) {
	m.contact_address = &s
}

// ContactAddress returns the value of the "contact_address" field in the mutation.
func (m *HostMutation) ContactAddress() (r string, exists bool) {
	v := m.contact_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContactAddress returns the old "contact_address" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldContactAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactAddress: %w", err)
	}
	return oldValue.ContactAddress, nil
}

// ResetContactAddress resets all changes to the "contact_address" field.
func (m *HostMutation) ResetContactAddress() {
	m.contact_address = nil
}

// SetCountry sets the "country" field.
func (m *HostMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *HostMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *HostMutation) ResetCountry() {
	m.country = nil
}

// SetLocation sets the "location" field.
func (m *HostMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *HostMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *HostMutation) ResetLocation() {
	m.location = nil
}

// SetGeoLocation sets the "geo_location" field.
func (m *HostMutation) SetGeoLocation(s string) {
	m.geo_location = &s
}

// GeoLocation returns the value of the "geo_location" field in the mutation.
func (m *HostMutation) GeoLocation() (r string, exists bool) {
	v := m.geo_location
	if v == nil {
		return
	}
	return *v, true
}

// OldGeoLocation returns the old "geo_location" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldGeoLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGeoLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGeoLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGeoLocation: %w", err)
	}
	return oldValue.GeoLocation, nil
}

// ResetGeoLocation resets all changes to the "geo_location" field.
func (m *HostMutation) ResetGeoLocation() {
	m.geo_location = nil
}

// SetPhone sets the "phone" field.
func (m *HostMutation) SetPhone(sn []schema.PhoneNumber) {
	m.phone = &sn
	m.appendphone = nil
}

// Phone returns the value of the "phone" field in the mutation.
func (m *HostMutation) Phone() (r []schema.PhoneNumber, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldPhone(ctx context.Context) (v []schema.PhoneNumber, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// AppendPhone adds sn to the "phone" field.
func (m *HostMutation) AppendPhone(sn []schema.PhoneNumber) {
	m.appendphone = append(m.appendphone, sn...)
}

// AppendedPhone returns the list of values that were appended to the "phone" field in this mutation.
func (m *HostMutation) AppendedPhone() ([]schema.PhoneNumber, bool) {
	if len(m.appendphone) == 0 {
		return nil, false
	}
	return m.appendphone, true
}

// ClearPhone clears the value of the "phone" field.
func (m *HostMutation) ClearPhone() {
	m.phone = nil
	m.appendphone = nil
	m.clearedFields[host.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *HostMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[host.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *HostMutation) ResetPhone() {
	m.phone = nil
	m.appendphone = nil
	delete(m.clearedFields, host.FieldPhone)
}

// SetNeighbours sets the "neighbours" field.
func (m *HostMutation) SetNeighbours(sn []schema.HostName) {
	m.neighbours = &sn
	m.appendneighbours = nil
}

// Neighbours returns the value of the "neighbours" field in the mutation.
func (m *HostMutation) Neighbours() (r []schema.HostName, exists bool) {
	v := m.neighbours
	if v == nil {
		return
	}
	return *v, true
}

// OldNeighbours returns the old "neighbours" field's value of the Host entity.
// If the Host object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HostMutation) OldNeighbours(ctx context.Context) (v []schema.HostName, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNeighbours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNeighbours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNeighbours: %w", err)
	}
	return oldValue.Neighbours, nil
}

// AppendNeighbours adds sn to the "neighbours" field.
func (m *HostMutation) AppendNeighbours(sn []schema.HostName) {
	m.appendneighbours = append(m.appendneighbours, sn...)
}

// AppendedNeighbours returns the list of values that were appended to the "neighbours" field in this mutation.
func (m *HostMutation) AppendedNeighbours() ([]schema.HostName, bool) {
	if len(m.appendneighbours) == 0 {
		return nil, false
	}
	return m.appendneighbours, true
}

// ClearNeighbours clears the value of the "neighbours" field.
func (m *HostMutation) ClearNeighbours() {
	m.neighbours = nil
	m.appendneighbours = nil
	m.clearedFields[host.FieldNeighbours] = struct{}{}
}

// NeighboursCleared returns if the "neighbours" field was cleared in this mutation.
func (m *HostMutation) NeighboursCleared() bool {
	_, ok := m.clearedFields[host.FieldNeighbours]
	return ok
}

// ResetNeighbours resets all changes to the "neighbours" field.
func (m *HostMutation) ResetNeighbours() {
	m.neighbours = nil
	m.appendneighbours = nil
	delete(m.clearedFields, host.FieldNeighbours)
}

// Where appends a list predicates to the HostMutation builder.
func (m *HostMutation) Where(ps ...predicate.Host) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HostMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HostMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Host, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HostMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HostMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Host).
func (m *HostMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HostMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.name != nil {
		fields = append(fields, host.FieldName)
	}
	if m._type != nil {
		fields = append(fields, host.FieldType)
	}
	if m.entry != nil {
		fields = append(fields, host.FieldEntry)
	}
	if m.machine_type != nil {
		fields = append(fields, host.FieldMachineType)
	}
	if m.organization != nil {
		fields = append(fields, host.FieldOrganization)
	}
	if m.contact != nil {
		fields = append(fields, host.FieldContact)
	}
	if m.contact_address != nil {
		fields = append(fields, host.FieldContactAddress)
	}
	if m.country != nil {
		fields = append(fields, host.FieldCountry)
	}
	if m.location != nil {
		fields = append(fields, host.FieldLocation)
	}
	if m.geo_location != nil {
		fields = append(fields, host.FieldGeoLocation)
	}
	if m.phone != nil {
		fields = append(fields, host.FieldPhone)
	}
	if m.neighbours != nil {
		fields = append(fields, host.FieldNeighbours)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HostMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case host.FieldName:
		return m.Name()
	case host.FieldType:
		return m.GetType()
	case host.FieldEntry:
		return m.Entry()
	case host.FieldMachineType:
		return m.MachineType()
	case host.FieldOrganization:
		return m.Organization()
	case host.FieldContact:
		return m.Contact()
	case host.FieldContactAddress:
		return m.ContactAddress()
	case host.FieldCountry:
		return m.Country()
	case host.FieldLocation:
		return m.Location()
	case host.FieldGeoLocation:
		return m.GeoLocation()
	case host.FieldPhone:
		return m.Phone()
	case host.FieldNeighbours:
		return m.Neighbours()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HostMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case host.FieldName:
		return m.OldName(ctx)
	case host.FieldType:
		return m.OldType(ctx)
	case host.FieldEntry:
		return m.OldEntry(ctx)
	case host.FieldMachineType:
		return m.OldMachineType(ctx)
	case host.FieldOrganization:
		return m.OldOrganization(ctx)
	case host.FieldContact:
		return m.OldContact(ctx)
	case host.FieldContactAddress:
		return m.OldContactAddress(ctx)
	case host.FieldCountry:
		return m.OldCountry(ctx)
	case host.FieldLocation:
		return m.OldLocation(ctx)
	case host.FieldGeoLocation:
		return m.OldGeoLocation(ctx)
	case host.FieldPhone:
		return m.OldPhone(ctx)
	case host.FieldNeighbours:
		return m.OldNeighbours(ctx)
	}
	return nil, fmt.Errorf("unknown Host field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) SetField(name string, value ent.Value) error {
	switch name {
	case host.FieldName:
		v, ok := value.(schema.HostName)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case host.FieldType:
		v, ok := value.(host.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case host.FieldEntry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntry(v)
		return nil
	case host.FieldMachineType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMachineType(v)
		return nil
	case host.FieldOrganization:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganization(v)
		return nil
	case host.FieldContact:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContact(v)
		return nil
	case host.FieldContactAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactAddress(v)
		return nil
	case host.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case host.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case host.FieldGeoLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGeoLocation(v)
		return nil
	case host.FieldPhone:
		v, ok := value.([]schema.PhoneNumber)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case host.FieldNeighbours:
		v, ok := value.([]schema.HostName)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNeighbours(v)
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HostMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HostMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HostMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Host numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HostMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(host.FieldPhone) {
		fields = append(fields, host.FieldPhone)
	}
	if m.FieldCleared(host.FieldNeighbours) {
		fields = append(fields, host.FieldNeighbours)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HostMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HostMutation) ClearField(name string) error {
	switch name {
	case host.FieldPhone:
		m.ClearPhone()
		return nil
	case host.FieldNeighbours:
		m.ClearNeighbours()
		return nil
	}
	return fmt.Errorf("unknown Host nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HostMutation) ResetField(name string) error {
	switch name {
	case host.FieldName:
		m.ResetName()
		return nil
	case host.FieldType:
		m.ResetType()
		return nil
	case host.FieldEntry:
		m.ResetEntry()
		return nil
	case host.FieldMachineType:
		m.ResetMachineType()
		return nil
	case host.FieldOrganization:
		m.ResetOrganization()
		return nil
	case host.FieldContact:
		m.ResetContact()
		return nil
	case host.FieldContactAddress:
		m.ResetContactAddress()
		return nil
	case host.FieldCountry:
		m.ResetCountry()
		return nil
	case host.FieldLocation:
		m.ResetLocation()
		return nil
	case host.FieldGeoLocation:
		m.ResetGeoLocation()
		return nil
	case host.FieldPhone:
		m.ResetPhone()
		return nil
	case host.FieldNeighbours:
		m.ResetNeighbours()
		return nil
	}
	return fmt.Errorf("unknown Host field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HostMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HostMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HostMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HostMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HostMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HostMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HostMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Host unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HostMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Host edge %s", name)
}

// JokeMutation represents an operation that mutates the Joke nodes in the graph.
type JokeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	body          *string
	category      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Joke, error)
	predicates    []predicate.Joke
}

var _ ent.Mutation = (*JokeMutation)(nil)

// jokeOption allows management of the mutation configuration using functional options.
type jokeOption func(*JokeMutation)

// newJokeMutation creates new mutation for the Joke entity.
func newJokeMutation(c config, op Op, opts ...jokeOption) *JokeMutation {
	m := &JokeMutation{
		config:        c,
		op:            op,
		typ:           TypeJoke,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJokeID sets the ID field of the mutation.
func withJokeID(id int) jokeOption {
	return func(m *JokeMutation) {
		var (
			err   error
			once  sync.Once
			value *Joke
		)
		m.oldValue = func(ctx context.Context) (*Joke, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Joke.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJoke sets the old Joke of the mutation.
func withJoke(node *Joke) jokeOption {
	return func(m *JokeMutation) {
		m.oldValue = func(context.Context) (*Joke, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JokeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JokeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Joke entities.
func (m *JokeMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JokeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JokeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Joke.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBody sets the "body" field.
func (m *JokeMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *JokeMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Joke entity.
// If the Joke object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JokeMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *JokeMutation) ResetBody() {
	m.body = nil
}

// SetCategory sets the "category" field.
func (m *JokeMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *JokeMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Joke entity.
// If the Joke object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JokeMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *JokeMutation) ResetCategory() {
	m.category = nil
}

// Where appends a list predicates to the JokeMutation builder.
func (m *JokeMutation) Where(ps ...predicate.Joke) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JokeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JokeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Joke, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JokeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JokeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Joke).
func (m *JokeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JokeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.body != nil {
		fields = append(fields, joke.FieldBody)
	}
	if m.category != nil {
		fields = append(fields, joke.FieldCategory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JokeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case joke.FieldBody:
		return m.Body()
	case joke.FieldCategory:
		return m.Category()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JokeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case joke.FieldBody:
		return m.OldBody(ctx)
	case joke.FieldCategory:
		return m.OldCategory(ctx)
	}
	return nil, fmt.Errorf("unknown Joke field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JokeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case joke.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case joke.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	}
	return fmt.Errorf("unknown Joke field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JokeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JokeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JokeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Joke numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JokeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JokeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JokeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Joke nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JokeMutation) ResetField(name string) error {
	switch name {
	case joke.FieldBody:
		m.ResetBody()
		return nil
	case joke.FieldCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown Joke field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JokeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JokeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JokeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JokeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JokeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JokeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JokeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Joke unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JokeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Joke edge %s", name)
}
